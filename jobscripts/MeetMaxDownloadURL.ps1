# Define the log directory
$logDir = "C:\Users\xnlou\OneDrive\Documents\Logs"

# Prompt for the CSV file path
$csvFile = Read-Host "Enter the path to the CSV file generated by MeetMaxUrlCheck.ps1"

# Validate the CSV file path
if (-not (Test-Path -Path $csvFile)) {
    Write-Host "CSV file not found: $csvFile"
    exit 1
}

# Read the CSV file
$events = Import-Csv -Path $csvFile

# Generate timestamp for consistent naming
$timestamp = Get-Date -Format "yyyyMMddTHHmmss"

# Process each event in the CSV
foreach ($event in $events) {
    if ($event.IsDownloadable -eq "1" -and $event.DownloadLink) {
        $eventId = $event.EventID
        $downloadUrl = $event.DownloadLink
        Write-Host "---"
        Write-Host ("Starting download for EventID {0} from {1}" -f $eventId, $downloadUrl)
        
        try {
            # Create a session to maintain cookies
            $session = New-Object Microsoft.PowerShell.Commands.WebRequestSession
            Write-Host ("Created new WebRequestSession for EventID {0}" -f $eventId)
            
            # Download the file with retry logic
            $retryCount = 0
            $maxRetries = 2
            $success = $false
            
            while (-not $success -and $retryCount -lt $maxRetries) {
                Write-Host ("Attempt {0}/{1} for EventID {2}" -f ($retryCount + 1), $maxRetries, $eventId)
                try {
                    $downloadFile = Join-Path -Path $logDir -ChildPath "${timestamp}_${eventId}.xls"
                    Write-Host ("Download file path: {0}" -f $downloadFile)
                    
                    $downloadResponse = Invoke-WebRequest -Uri $downloadUrl -Method Get -TimeoutSec 15 -WebSession $session -ErrorAction Stop -Headers @{ 
                        "User-Agent" = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36";
                        "Accept" = "application/vnd.ms-excel,application/octet-stream";
                        "Accept-Encoding" = "gzip, deflate";
                        "Referer" = $event.URL
                    }
                    if ($downloadResponse.StatusCode -eq 200 -and $downloadResponse.Content.Length -gt 1024) {
                        [System.IO.File]::WriteAllBytes($downloadFile, $downloadResponse.Content)
                        Write-Host ("Successfully downloaded EventID {0} to {1}" -f $eventId, $downloadFile)
                        $success = $true
                    }
                    else {
                        Write-Host ("Invalid response for EventID {0}: Status {1}" -f $eventId, $downloadResponse.StatusCode)
                        $retryCount++
                    }
                }
                catch {
                    Write-Host ("Error downloading EventID {0}: {1}" -f $eventId, $_.Exception.Message)
                    $retryCount++
                    Start-Sleep -Milliseconds 4000
                }
            }
            if (-not $success) {
                Write-Host ("Failed to download EventID {0} after {1} retries" -f $eventId, $maxRetries)
            }
        }
        catch {
            Write-Host ("Error processing EventID {0}: {1}" -f $eventId, $_.Exception.Message)
        }
    }
    else {
        Write-Host ("Skipping EventID {0}: Not downloadable or no link" -f $event.EventID)
    }
}

Write-Host "Download process completed."